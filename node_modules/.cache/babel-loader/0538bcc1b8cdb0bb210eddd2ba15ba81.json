{"ast":null,"code":"var _jsxFileName = \"/Users/xavrac/dev/react/pendu/src/App.js\";\nimport React, { Component } from 'react';\nimport Keyboard from './Keyboard.js';\nimport Riddle from './Riddle.js';\nimport './App.css';\nimport words from './resources/words_EN.js';\nimport HangmanCanvas from './HangmanCanvas.js';\nconst LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('');\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      attemptedKeys: [],\n      wordToGuess: this.randomWord(),\n      maxErrorsAuthorized: 5\n    };\n\n    this.clickKey = key => {\n      const {\n        attemptedKeys\n      } = this.state;\n\n      if (!attemptedKeys.includes(key)) {\n        const newAttemptedKeys = [...attemptedKeys, key];\n        this.setState({\n          attemptedKeys: newAttemptedKeys\n        });\n      }\n    };\n\n    this.isRevealed = key => {\n      const {\n        attemptedKeys\n      } = this.state;\n      return attemptedKeys.includes(key);\n    };\n\n    this.getStatus = key => {\n      const {\n        attemptedKeys\n      } = this.state;\n\n      if (attemptedKeys.includes(key)) {\n        return \"clicked\";\n      }\n\n      return \"unclicked\";\n    };\n\n    this.resetGame = () => {\n      this.setState({\n        attemptedKeys: [],\n        wordToGuess: this.randomWord(),\n        numberOfErrors: 0\n      });\n    };\n  }\n\n  randomWord() {\n    const randomIndex = Math.floor(Math.random() * words.length);\n    return words[randomIndex].split('');\n  }\n\n  render() {\n    const {\n      wordToGuess,\n      attemptedKeys,\n      maxErrorsAuthorized\n    } = this.state;\n    const numberOfErrors = attemptedKeys.filter(key => !wordToGuess.includes(key)).length;\n    const won = wordToGuess.every(key => attemptedKeys.includes(key));\n    const lost = numberOfErrors === maxErrorsAuthorized;\n    const gameStatus = won ? 'won' : lost ? 'lost' : 'playing';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pendu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(HangmanCanvas, {\n      numberOfErrors: numberOfErrors,\n      maxErrorsAuthorized: maxErrorsAuthorized,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Riddle, {\n      word: wordToGuess,\n      isRevealed: this.isRevealed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Keyboard, {\n      keys: LETTERS,\n      onClick: this.clickKey,\n      status: this.getStatus,\n      gameStatus: gameStatus,\n      reset: this.resetGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/xavrac/dev/react/pendu/src/App.js"],"names":["React","Component","Keyboard","Riddle","words","HangmanCanvas","LETTERS","split","App","state","attemptedKeys","wordToGuess","randomWord","maxErrorsAuthorized","clickKey","key","includes","newAttemptedKeys","setState","isRevealed","getStatus","resetGame","numberOfErrors","randomIndex","Math","floor","random","length","render","filter","won","every","lost","gameStatus"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,MAAMC,OAAO,GAAG,6BAA6BC,KAA7B,CAAmC,EAAnC,CAAhB;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BQ,KAD0B,GAClB;AACNC,MAAAA,aAAa,EAAE,EADT;AAENC,MAAAA,WAAW,EAAE,KAAKC,UAAL,EAFP;AAGNC,MAAAA,mBAAmB,EAAE;AAHf,KADkB;;AAAA,SAQ1BC,QAR0B,GAQdC,GAAD,IAAS;AAClB,YAAM;AAAEL,QAAAA;AAAF,UAAoB,KAAKD,KAA/B;;AACA,UAAI,CAACC,aAAa,CAACM,QAAd,CAAuBD,GAAvB,CAAL,EAAkC;AAChC,cAAME,gBAAgB,GAAG,CAAC,GAAGP,aAAJ,EAAmBK,GAAnB,CAAzB;AACA,aAAKG,QAAL,CAAe;AAAER,UAAAA,aAAa,EAAEO;AAAjB,SAAf;AACD;AACF,KAdyB;;AAAA,SAiB1BE,UAjB0B,GAiBZJ,GAAD,IAAS;AACpB,YAAM;AAACL,QAAAA;AAAD,UAAkB,KAAKD,KAA7B;AACA,aAAOC,aAAa,CAACM,QAAd,CAAuBD,GAAvB,CAAP;AACD,KApByB;;AAAA,SAuB1BK,SAvB0B,GAuBbL,GAAD,IAAS;AACnB,YAAM;AAAEL,QAAAA;AAAF,UAAoB,KAAKD,KAA/B;;AACA,UAAIC,aAAa,CAACM,QAAd,CAAuBD,GAAvB,CAAJ,EAAiC;AAC/B,eAAO,SAAP;AACD;;AACD,aAAO,WAAP;AACD,KA7ByB;;AAAA,SAoC1BM,SApC0B,GAoCd,MAAM;AAChB,WAAKH,QAAL,CAAc;AACVR,QAAAA,aAAa,EAAE,EADL;AAEVC,QAAAA,WAAW,EAAE,KAAKC,UAAL,EAFH;AAGVU,QAAAA,cAAc,EAAE;AAHN,OAAd;AAKD,KA1CyB;AAAA;;AA+B1BV,EAAAA,UAAU,GAAG;AACX,UAAMW,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBtB,KAAK,CAACuB,MAAjC,CAApB;AACA,WAAOvB,KAAK,CAACmB,WAAD,CAAL,CAAmBhB,KAAnB,CAAyB,EAAzB,CAAP;AACD;;AAUDqB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEjB,MAAAA,WAAF;AAAeD,MAAAA,aAAf;AAA8BG,MAAAA;AAA9B,QAAsD,KAAKJ,KAAjE;AACA,UAAMa,cAAc,GAAGZ,aAAa,CAACmB,MAAd,CAAsBd,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAZ,CAAqBD,GAArB,CAA9B,EAAyDY,MAAhF;AACA,UAAMG,GAAG,GAAGnB,WAAW,CAACoB,KAAZ,CAAmBhB,GAAG,IAAIL,aAAa,CAACM,QAAd,CAAuBD,GAAvB,CAA1B,CAAZ;AACA,UAAMiB,IAAI,GAAGV,cAAc,KAAKT,mBAAhC;AACA,UAAMoB,UAAU,GAAGH,GAAG,GAAG,KAAH,GAAWE,IAAI,GAAG,MAAH,GAAY,SAAjD;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAe,MAAA,cAAc,EAAEV,cAA/B;AAA+C,MAAA,mBAAmB,EAAET,mBAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAEF,WAAd;AAA2B,MAAA,UAAU,EAAE,KAAKQ,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEb,OAAhB;AAAyB,MAAA,OAAO,EAAE,KAAKQ,QAAvC;AAAiD,MAAA,MAAM,EAAE,KAAKM,SAA9D;AAAyE,MAAA,UAAU,EAAEa,UAArF;AAAiG,MAAA,KAAK,EAAE,KAAKZ,SAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AAzDyB;;AA4D5B,eAAeb,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Keyboard from './Keyboard.js'\nimport Riddle from './Riddle.js'\nimport './App.css'\nimport words from './resources/words_EN.js'\nimport HangmanCanvas from './HangmanCanvas.js'\n\nconst LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('')\n\nclass App extends Component {\n  state = {\n    attemptedKeys: [],\n    wordToGuess: this.randomWord(),\n    maxErrorsAuthorized: 5,\n  }\n\n  // Putting an arrow function to bind this here...\n  clickKey = (key) => {\n    const { attemptedKeys } = this.state\n    if (!attemptedKeys.includes(key)) {\n      const newAttemptedKeys = [...attemptedKeys, key]\n      this.setState( { attemptedKeys: newAttemptedKeys } )\n    }\n  }\n\n  // Putting an arrow function to bind this here...\n  isRevealed = (key) => {\n    const {attemptedKeys} = this.state\n    return attemptedKeys.includes(key)\n  }\n\n  // Putting an arrow function to bind this here...\n  getStatus = (key) => {\n    const { attemptedKeys } = this.state\n    if (attemptedKeys.includes(key)) {\n      return \"clicked\"\n    }\n    return \"unclicked\"\n  }\n\n  randomWord() {\n    const randomIndex = Math.floor(Math.random() * words.length)\n    return words[randomIndex].split('')\n  }\n\n  resetGame = () => {\n    this.setState({ \n        attemptedKeys: [], \n        wordToGuess: this.randomWord(),\n        numberOfErrors: 0\n      })\n  }\n\n  render() {\n    const { wordToGuess, attemptedKeys, maxErrorsAuthorized } = this.state\n    const numberOfErrors = attemptedKeys.filter( key => !wordToGuess.includes(key)).length\n    const won = wordToGuess.every( key => attemptedKeys.includes(key))\n    const lost = numberOfErrors === maxErrorsAuthorized\n    const gameStatus = won ? 'won' : lost ? 'lost' : 'playing'\n    return (\n      <div className=\"pendu\">\n        <HangmanCanvas numberOfErrors={numberOfErrors} maxErrorsAuthorized={maxErrorsAuthorized} />\n        <Riddle word={wordToGuess} isRevealed={this.isRevealed} />\n        <Keyboard keys={LETTERS} onClick={this.clickKey} status={this.getStatus} gameStatus={gameStatus} reset={this.resetGame} />\n      </div>\n    )\n  }\n\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}