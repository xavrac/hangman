{"ast":null,"code":"var _jsxFileName = \"/Users/xavrac/dev/react/pendu/src/App.js\";\nimport React, { Component } from 'react';\nimport Keyboard from './Keyboard.js';\nimport Riddle from './Riddle.js';\nimport './App.css';\nimport words from './resources/words_EN.js';\nimport HangmanCanvas from './HangmanCanvas.js';\nconst LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('');\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      attemptedKeys: [],\n      wordToGuess: this.randomWord()\n    };\n\n    this.clickKey = key => {\n      const {\n        attemptedKeys,\n        wordToGuess\n      } = this.state;\n\n      if (!attemptedKeys.includes(key)) {\n        const newAttemptedKeys = [...attemptedKeys, key];\n        this.setState({\n          attemptedKeys: newAttemptedKeys\n        });\n      }\n    };\n\n    this.isRevealed = key => {\n      const {\n        attemptedKeys\n      } = this.state;\n      return attemptedKeys.includes(key);\n    };\n\n    this.getStatus = key => {\n      const {\n        attemptedKeys\n      } = this.state;\n\n      if (attemptedKeys.includes(key)) {\n        return \"clicked\";\n      }\n\n      return \"unclicked\";\n    };\n\n    this.resetGame = () => {\n      this.setState({\n        attemptedKeys: [],\n        wordToGuess: this.randomWord(),\n        numberOfErrors: 0\n      });\n    };\n  }\n\n  randomWord() {\n    const randomIndex = Math.floor(Math.random() * words.length);\n    return words[randomIndex].split('');\n  }\n\n  render() {\n    const {\n      wordToGuess,\n      attemptedKeys\n    } = this.state;\n    const won = wordToGuess.every(key => attemptedKeys.includes(key));\n    const numberOfErrors = attemptedKeys.filter(key => !wordToGuess.includes(key)).length;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pendu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(HangmanCanvas, {\n      numberOfErrors: numberOfErrors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Riddle, {\n      word: wordToGuess,\n      isRevealed: this.isRevealed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Keyboard, {\n      keys: LETTERS,\n      onClick: this.clickKey,\n      status: this.getStatus,\n      won: won,\n      reset: this.resetGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/xavrac/dev/react/pendu/src/App.js"],"names":["React","Component","Keyboard","Riddle","words","HangmanCanvas","LETTERS","split","App","state","attemptedKeys","wordToGuess","randomWord","clickKey","key","includes","newAttemptedKeys","setState","isRevealed","getStatus","resetGame","numberOfErrors","randomIndex","Math","floor","random","length","render","won","every","filter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,MAAMC,OAAO,GAAG,6BAA6BC,KAA7B,CAAmC,EAAnC,CAAhB;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BQ,KAD0B,GAClB;AACNC,MAAAA,aAAa,EAAE,EADT;AAENC,MAAAA,WAAW,EAAE,KAAKC,UAAL;AAFP,KADkB;;AAAA,SAO1BC,QAP0B,GAOdC,GAAD,IAAS;AAClB,YAAM;AAACJ,QAAAA,aAAD;AAAgBC,QAAAA;AAAhB,UAA+B,KAAKF,KAA1C;;AACA,UAAI,CAACC,aAAa,CAACK,QAAd,CAAuBD,GAAvB,CAAL,EAAkC;AAChC,cAAME,gBAAgB,GAAG,CAAC,GAAGN,aAAJ,EAAmBI,GAAnB,CAAzB;AACA,aAAKG,QAAL,CAAe;AAAEP,UAAAA,aAAa,EAAEM;AAAjB,SAAf;AACD;AACF,KAbyB;;AAAA,SAgB1BE,UAhB0B,GAgBZJ,GAAD,IAAS;AACpB,YAAM;AAACJ,QAAAA;AAAD,UAAkB,KAAKD,KAA7B;AACA,aAAOC,aAAa,CAACK,QAAd,CAAuBD,GAAvB,CAAP;AACD,KAnByB;;AAAA,SAsB1BK,SAtB0B,GAsBbL,GAAD,IAAS;AACnB,YAAM;AAAEJ,QAAAA;AAAF,UAAoB,KAAKD,KAA/B;;AACA,UAAIC,aAAa,CAACK,QAAd,CAAuBD,GAAvB,CAAJ,EAAiC;AAC/B,eAAO,SAAP;AACD;;AACD,aAAO,WAAP;AACD,KA5ByB;;AAAA,SAmC1BM,SAnC0B,GAmCd,MAAM;AAChB,WAAKH,QAAL,CAAc;AACVP,QAAAA,aAAa,EAAE,EADL;AAEVC,QAAAA,WAAW,EAAE,KAAKC,UAAL,EAFH;AAGVS,QAAAA,cAAc,EAAE;AAHN,OAAd;AAKD,KAzCyB;AAAA;;AA8B1BT,EAAAA,UAAU,GAAG;AACX,UAAMU,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBrB,KAAK,CAACsB,MAAjC,CAApB;AACA,WAAOtB,KAAK,CAACkB,WAAD,CAAL,CAAmBf,KAAnB,CAAyB,EAAzB,CAAP;AACD;;AAUDoB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhB,MAAAA,WAAF;AAAeD,MAAAA;AAAf,QAAiC,KAAKD,KAA5C;AACA,UAAMmB,GAAG,GAAGjB,WAAW,CAACkB,KAAZ,CAAmBf,GAAG,IAAIJ,aAAa,CAACK,QAAd,CAAuBD,GAAvB,CAA1B,CAAZ;AACA,UAAMO,cAAc,GAAGX,aAAa,CAACoB,MAAd,CAAsBhB,GAAG,IAAI,CAACH,WAAW,CAACI,QAAZ,CAAqBD,GAArB,CAA9B,EAAyDY,MAAhF;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAe,MAAA,cAAc,EAAEL,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAEV,WAAd;AAA2B,MAAA,UAAU,EAAE,KAAKO,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEZ,OAAhB;AAAyB,MAAA,OAAO,EAAE,KAAKO,QAAvC;AAAiD,MAAA,MAAM,EAAE,KAAKM,SAA9D;AAAyE,MAAA,GAAG,EAAES,GAA9E;AAAmF,MAAA,KAAK,EAAE,KAAKR,SAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AAtDyB;;AAyD5B,eAAeZ,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Keyboard from './Keyboard.js'\nimport Riddle from './Riddle.js'\nimport './App.css'\nimport words from './resources/words_EN.js'\nimport HangmanCanvas from './HangmanCanvas.js'\n\nconst LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('')\n\nclass App extends Component {\n  state = {\n    attemptedKeys: [],\n    wordToGuess: this.randomWord()\n  }\n\n  // Putting an arrow function to bind this here...\n  clickKey = (key) => {\n    const {attemptedKeys, wordToGuess} = this.state\n    if (!attemptedKeys.includes(key)) {\n      const newAttemptedKeys = [...attemptedKeys, key]\n      this.setState( { attemptedKeys: newAttemptedKeys } )\n    }\n  }\n\n  // Putting an arrow function to bind this here...\n  isRevealed = (key) => {\n    const {attemptedKeys} = this.state\n    return attemptedKeys.includes(key)\n  }\n\n  // Putting an arrow function to bind this here...\n  getStatus = (key) => {\n    const { attemptedKeys } = this.state\n    if (attemptedKeys.includes(key)) {\n      return \"clicked\"\n    }\n    return \"unclicked\"\n  }\n\n  randomWord() {\n    const randomIndex = Math.floor(Math.random() * words.length)\n    return words[randomIndex].split('')\n  }\n\n  resetGame = () => {\n    this.setState({ \n        attemptedKeys: [], \n        wordToGuess: this.randomWord(),\n        numberOfErrors: 0\n      })\n  }\n\n  render() {\n    const { wordToGuess, attemptedKeys } = this.state\n    const won = wordToGuess.every( key => attemptedKeys.includes(key))\n    const numberOfErrors = attemptedKeys.filter( key => !wordToGuess.includes(key)).length\n    return (\n      <div className=\"pendu\">\n        <HangmanCanvas numberOfErrors={numberOfErrors} />\n        <Riddle word={wordToGuess} isRevealed={this.isRevealed} />\n        <Keyboard keys={LETTERS} onClick={this.clickKey} status={this.getStatus} won={won} reset={this.resetGame} />\n      </div>\n    )\n  }\n\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}