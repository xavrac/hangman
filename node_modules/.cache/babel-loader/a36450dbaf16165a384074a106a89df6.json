{"ast":null,"code":"var _jsxFileName = \"/Users/xavrac/dev/react/pendu/src/App.js\";\nimport React, { Component } from 'react';\nimport Keyboard from './Keyboard.js';\nimport Riddle from './Riddle.js';\nimport './App.css';\nconst LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('');\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      attemptedKeys: [],\n      foundKeyIndexes: [],\n      wordToGuess: 'COMPUTER'\n    };\n\n    this.clickKey = key => {\n      const {\n        attemptedKeys\n      } = this.state;\n\n      if (!attemptedKeys.includes(key)) {\n        const newAttemptedKeys = [...attemptedKeys, key];\n        this.setState({\n          attemptedKeys: newAttemptedKeys\n        });\n      }\n    };\n\n    this.getStatus = key => {\n      const {\n        attemptedKeys\n      } = this.state;\n\n      if (attemptedKeys.includes(key)) {\n        return \"clicked\";\n      }\n\n      return \"unclicked\";\n    };\n  }\n\n  render() {\n    const {\n      wordToGuess,\n      foundKeyIndexes\n    } = this.state;\n    const won = wordToGuess.length === foundKeyIndexes.length;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pendu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Riddle, {\n      word: wordToGuess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Keyboard, {\n      keys: LETTERS,\n      onClick: this.clickKey,\n      status: this.getStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/xavrac/dev/react/pendu/src/App.js"],"names":["React","Component","Keyboard","Riddle","LETTERS","split","App","state","attemptedKeys","foundKeyIndexes","wordToGuess","clickKey","key","includes","newAttemptedKeys","setState","getStatus","render","won","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,WAAP;AAEA,MAAMC,OAAO,GAAG,6BAA6BC,KAA7B,CAAmC,EAAnC,CAAhB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BM,KAD0B,GAClB;AACNC,MAAAA,aAAa,EAAE,EADT;AAENC,MAAAA,eAAe,EAAE,EAFX;AAGNC,MAAAA,WAAW,EAAE;AAHP,KADkB;;AAAA,SAQ1BC,QAR0B,GAQdC,GAAD,IAAS;AAClB,YAAM;AAACJ,QAAAA;AAAD,UAAkB,KAAKD,KAA7B;;AACA,UAAI,CAACC,aAAa,CAACK,QAAd,CAAuBD,GAAvB,CAAL,EAAkC;AAChC,cAAME,gBAAgB,GAAG,CAAC,GAAGN,aAAJ,EAAmBI,GAAnB,CAAzB;AACA,aAAKG,QAAL,CAAe;AAACP,UAAAA,aAAa,EAAEM;AAAhB,SAAf;AACD;AACF,KAdyB;;AAAA,SAiB1BE,SAjB0B,GAiBbJ,GAAD,IAAS;AACnB,YAAM;AAAEJ,QAAAA;AAAF,UAAoB,KAAKD,KAA/B;;AACA,UAAIC,aAAa,CAACK,QAAd,CAAuBD,GAAvB,CAAJ,EAAiC;AAC/B,eAAO,SAAP;AACD;;AACD,aAAO,WAAP;AACD,KAvByB;AAAA;;AAyB1BK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA,WAAF;AAAeD,MAAAA;AAAf,QAAmC,KAAKF,KAA9C;AACA,UAAMW,GAAG,GAAGR,WAAW,CAACS,MAAZ,KAAuBV,eAAe,CAACU,MAAnD;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAET,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEN,OAAhB;AAAyB,MAAA,OAAO,EAAE,KAAKO,QAAvC;AAAiD,MAAA,MAAM,EAAE,KAAKK,SAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMH;;AAlC2B;;AAqC5B,eAAeV,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Keyboard from './Keyboard.js'\nimport Riddle from './Riddle.js'\nimport './App.css'\n\nconst LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('')\n\nclass App extends Component {\n  state = {\n    attemptedKeys: [],\n    foundKeyIndexes: [],\n    wordToGuess: 'COMPUTER',\n  }\n\n  // Putting an arrow function to bind this here...\n  clickKey = (key) => {\n    const {attemptedKeys} = this.state\n    if (!attemptedKeys.includes(key)) {\n      const newAttemptedKeys = [...attemptedKeys, key]\n      this.setState( {attemptedKeys: newAttemptedKeys} )\n    }\n  }\n\n  // Putting an arrow function to bind this here...\n  getStatus = (key) => {\n    const { attemptedKeys } = this.state\n    if (attemptedKeys.includes(key)) {\n      return \"clicked\"\n    }\n    return \"unclicked\"\n  }\n  \n  render() {\n    const { wordToGuess, foundKeyIndexes } = this.state\n    const won = wordToGuess.length === foundKeyIndexes.length\n    return (\n      <div className=\"pendu\">\n        <Riddle word={wordToGuess} />\n        <Keyboard keys={LETTERS} onClick={this.clickKey} status={this.getStatus} />\n      </div>\n  )\n}\n\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}